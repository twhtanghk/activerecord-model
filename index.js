// Generated by CoffeeScript 1.12.7
(function() {
  var Promise, _, assert, async, await, http, ref, stampit;

  _ = require('lodash');

  assert = require('assert');

  ref = require('asyncawait'), async = ref.async, await = ref.await;

  Promise = require('bluebird');

  stampit = require('stampit');

  http = Promise.promisifyAll(require('needle'));

  module.exports.token = async(function(opts) {
    var body, client, data, ref1, scope, statusCode, statusMessage, url, user;
    url = opts.url, client = opts.client, user = opts.user, scope = opts.scope;
    opts = {
      'Content-Type': 'application/x-www-form-urlencoded',
      username: client.id,
      password: client.secret
    };
    data = {};
    if (user != null) {
      data = {
        grant_type: 'password',
        username: user.id,
        password: user.secret,
        scope: scope.join(' ')
      };
    } else {
      data = {
        grant_type: 'client_credentials'
      };
    }
    ref1 = await(module.exports.api().post(url.token, data, opts)), statusCode = ref1.statusCode, statusMessage = ref1.statusMessage, body = ref1.body;
    assert(statusCode === 200 && (body.error == null), statusMessage + ": " + body);
    return body.access_token;
  });

  module.exports.verify = async(function(opts) {
    var body, ref1, result, scope, statusCode, statusMessage, token, url;
    url = opts.url, scope = opts.scope, token = opts.token;
    opts = {
      headers: {
        Authorization: "Bearer " + token
      }
    };
    ref1 = await(module.exports.api().get(url.verify, null, opts)), statusCode = ref1.statusCode, statusMessage = ref1.statusMessage, body = ref1.body;
    assert(statusCode === 200, statusMessage + ": " + body);
    result = _.intersection(scope, body.scope.split(' '));
    assert(result.length === scope.length, "Unauthorizated access to " + scope);
    return body;
  });

  module.exports.validToken = async(function(opts) {
    var err, getToken, scope, token, url, verified;
    getToken = opts.getToken, url = opts.url, scope = opts.scope;
    token = null;
    while (true) {
      try {
        verified = await(module.exports.verify(_.extend({
          token: token
        }, opts)));
        return token;
      } catch (error) {
        err = error;
        token = await(getToken());
      }
    }
  });

  module.exports.api = function() {
    var stamp;
    return stamp = stampit().compose(http).statics({
      get: async(function(url, data, opts) {
        if (opts == null) {
          opts = {};
        }
        if (data != null) {
          if (opts.headers == null) {
            opts.headers = {};
          }
          _.extend(opts.headers, {
            'Content-Type': 'application/json',
            'x-http-method-override': 'get'
          });
          return await(http.postAsync(url, data, opts));
        } else {
          return await(http.getAsync(url, opts));
        }
      }),
      put: async(function(url, data, opts) {
        return await(http.putAsync(url, data, opts));
      }),
      post: async(function(url, data, opts) {
        return await(http.postAsync(url, data, opts));
      }),
      'delete': async(function(url, data, opts) {
        return await(http.deleteAsync(url, data, opts));
      })
    });
  };

  module.exports.authApi = function(getToken) {
    var api, opts;
    opts = async(function() {
      return {
        rejectUnauthorized: false,
        headers: {
          Authorization: "Bearer " + (await(getToken()))
        }
      };
    });
    api = module.exports.api();
    return stampit().compose(api).statics({
      get: async(function(url, data) {
        return await(api.get(url, await(opts())));
      }),
      put: async(function(url, data) {
        return await(api.put(url, data, await(opts())));
      }),
      post: async(function(url, data) {
        return await(api.post(url, data, await(opts())));
      }),
      'delete': async(function(url) {
        return await(api["delete"](url, null, await(opts())));
      })
    });
  };

  module.exports.model = function(baseUrl) {
    var stamp;
    return stamp = stampit().init(function(props) {
      return _.extend(this, this.parse(props));
    }).methods({
      getStamp: function() {
        return stamp;
      },
      isNew: function() {
        return this[this.getStamp().idAttribute] == null;
      },
      parse: function(data) {
        if (data == null) {
          data = {};
        }
        return data;
      },
      fetch: async(function() {
        var res;
        res = await(stamp.api.get(stamp.url(this[this.getStamp().idAttribute])));
        assert(res.statusCode === 200, res.statusMessage + ": " + res.body);
        return _.extend(this, this.parse(res));
      }),
      save: async(function(values) {
        var res;
        if (values == null) {
          values = {};
        }
        _.extend(this, values);
        if (this.isNew()) {
          res = await(stamp.api.post(stamp.url(), this));
          assert(res.statusCode === 201, res.statusMessage + ": " + res.body);
          return _.extend(this, this.parse(res.body));
        } else {
          res = await(stamp.api.put(stamp.url(this[this.getStamp().idAttribute]), this));
          assert(res.statusCode === 200, res.statusMessage + ": " + res.body);
          return _.extend(this, this.parse(res.body));
        }
      }),
      destroy: function() {
        var res;
        res = await(stamp.api["delete"](stamp.url(this[this.getStamp().idAttribute])));
        assert(res.statusCode === 200, res.statusMessage + ": " + res.body);
        return this;
      }
    }).statics({
      idAttribute: 'id',
      baseUrl: baseUrl,
      api: module.exports.api(),
      use: function(api) {
        this.api = api;
        return this;
      },
      url: function(id) {
        var path, ret, url;
        if (id == null) {
          id = '.';
        }
        url = require('url');
        path = require('path');
        ret = url.parse(this.baseUrl);
        ret.pathname = path.join(ret.pathname, id);
        return url.format(ret);
      },
      fetchOne: async(function(id) {
        var props;
        props = {};
        props[this.idAttribute] = id;
        return await(this(props).fetch());
      }),
      fetchAll: async(function(data) {
        if (data == null) {
          data = null;
        }
        return await(this.api.get(stamp.url));
      })
    });
  };

}).call(this);
